#!/usr/bin/env bash
set -euo pipefail

export NPM_CLIENT="${NPM_CLIENT:-npm}"
export NUXT_MAJOR="${NUXT_MAJOR:-3}"
export NUXI_INIT_ARGS="${NUXI_INIT_ARGS:-}"
export NUXT_VERSION="${NUXT_VERSION:-3.17.4}"

export PINIA_VERSION="${PINIA_VERSION:-^2}"
export PINIA_NUXT_VERSION="${PINIA_NUXT_VERSION:-^0.5}"
export NUXT_I18N_VERSION="${NUXT_I18N_VERSION:-^8}"
export HEADLESSUI_VUE_VERSION="${HEADLESSUI_VUE_VERSION:-^1}"
export HEROICONS_VUE_VERSION="${HEROICONS_VUE_VERSION:-^2}"
export FLYONUI_VERSION="${FLYONUI_VERSION:-latest}"
export NUXT_TAILWINDCSS_VERSION="${NUXT_TAILWINDCSS_VERSION:-^6}"
export ICONIFY_TAILWIND4_VERSION="${ICONIFY_TAILWIND4_VERSION:-^1}"

WORKDIR="/workspace/nuxt-app"
mkdir -p "$WORKDIR"
cd "$WORKDIR"

if [[ ! -f package.json ]]; then
  echo "[bootstrap] No package.json found. Initializing Nuxt (major=$NUXT_MAJOR) ..."
  CI=1 NUXT_TELEMETRY_DISABLED=1 FORCE_COLOR=0 npx --yes nuxi@latest init . --force --no-git $NUXI_INIT_ARGS
fi

echo "[bootstrap] Installing dependencies using $NPM_CLIENT ..."

# Pin Nuxt version non-interactively if requested (default 3.17.4)
if [[ -n "${NUXT_VERSION:-}" ]]; then
  node -e "const fs=require('fs');const f='package.json';const p=JSON.parse(fs.readFileSync(f,'utf8'));p.devDependencies=p.devDependencies||{};p.devDependencies.nuxt='${NUXT_VERSION}';fs.writeFileSync(f,JSON.stringify(p,null,2)+'\n');"
fi

case "$NPM_CLIENT" in
  npm)
    npm install --ignore-scripts ;;
  pnpm)
    corepack enable || true
    pnpm install --ignore-scripts ;;
  yarn|yarnBerry|yarnModern)
    corepack enable || true
    yarn install --ignore-scripts ;;
  *)
    echo "Unknown NPM_CLIENT=$NPM_CLIENT, falling back to npm";
    npm install --ignore-scripts ;;
esac

RUNTIME_DEPS=(
  "pinia@${PINIA_VERSION}"
  "@pinia/nuxt@${PINIA_NUXT_VERSION}"
  "@nuxtjs/i18n@${NUXT_I18N_VERSION}"
  "@headlessui/vue@${HEADLESSUI_VUE_VERSION}"
  "@heroicons/vue@${HEROICONS_VUE_VERSION}"
  "flyonui@${FLYONUI_VERSION}"
)

DEV_DEPS=(
  "@nuxtjs/tailwindcss@${NUXT_TAILWINDCSS_VERSION}"
  "@iconify/tailwind4@${ICONIFY_TAILWIND4_VERSION}"
  "eslint"
  "@nuxt/eslint-config"
)

install_deps() {
  local type="$1"; shift
  local deps=("$@")
  if [[ ${#deps[@]} -eq 0 ]]; then return 0; fi
  case "$NPM_CLIENT" in
    npm)
      if [[ "$type" == "dev" ]]; then
        npm i -D --ignore-scripts "${deps[@]}"
      else
        npm i --ignore-scripts "${deps[@]}"
      fi
      ;;
    pnpm)
      if [[ "$type" == "dev" ]]; then
        pnpm add -D --ignore-scripts "${deps[@]}"
      else
        pnpm add --ignore-scripts "${deps[@]}"
      fi
      ;;
    yarn|yarnBerry|yarnModern)
      if [[ "$type" == "dev" ]]; then
        yarn add -D --ignore-scripts "${deps[@]}"
      else
        yarn add --ignore-scripts "${deps[@]}"
      fi
      ;;
    *)
      if [[ "$type" == "dev" ]]; then
        npm i -D --ignore-scripts "${deps[@]}"
      else
        npm i --ignore-scripts "${deps[@]}"
      fi
      ;;
  esac
}

install_deps "runtime" "${RUNTIME_DEPS[@]}"
install_deps "dev" "${DEV_DEPS[@]}"

echo "[bootstrap] Running nuxt prepare ..."
CI=1 NUXT_TELEMETRY_DISABLED=1 FORCE_COLOR=0 npx --yes nuxt prepare

echo "[bootstrap] Completed. You can now run dev server."

# Scaffold files if missing
if [[ ! -f nuxt.config.ts ]]; then
  cat > nuxt.config.ts << 'EOF'
// Auto-generated by bootstrap.sh
export default defineNuxtConfig({
  devtools: { enabled: true },
  modules: ['@pinia/nuxt', '@nuxtjs/i18n', '@nuxtjs/tailwindcss'],
  css: ['~/assets/css/tailwind.css'],
  i18n: {
    strategy: 'no_prefix',
    locales: [
      { code: 'ja', iso: 'ja-JP', name: '日本語' },
      { code: 'en', iso: 'en-US', name: 'English' }
    ],
    defaultLocale: 'ja',
    vueI18n: {
      legacy: false,
      locale: 'ja',
      messages: {
        ja: { title: 'サンプル', hello: 'こんにちは', save: '保存', saved: '保存しました', language: '言語', ja: '日本語', en: '英語' },
        en: { title: 'Sample', hello: 'Hello', save: 'Save', saved: 'Saved', language: 'Language', ja: 'Japanese', en: 'English' }
      }
    }
  }
})
EOF
fi

if [[ ! -f tailwind.config.js ]]; then
  cat > tailwind.config.js << 'EOF'
/** Auto-generated by bootstrap.sh */
module.exports = {
  content: [
    './components/**/*.{vue,js,ts}',
    './layouts/**/*.vue',
    './pages/**/*.vue',
    './plugins/**/*.{js,ts}',
    './app.vue',
    './error.vue'
  ],
  theme: { extend: {} },
  plugins: []
}
EOF
fi

if [[ ! -f assets/css/tailwind.css ]]; then
  mkdir -p assets/css
  cat > assets/css/tailwind.css << 'EOF'
@import "tailwindcss";
@plugin "flyonui";
@plugin "@iconify/tailwind4";
@import "flyonui/variants.css"; /* JS コンポーネントを使う場合に必要 */

@source "./node_modules/flyonui/dist/index.js"; /* JS コンポーネントを使う場合に必要 */
EOF
fi

mkdir -p components/ui layouts pages stores plugins middleware

if [[ ! -f layouts/default.vue ]]; then
  cat > layouts/default.vue << 'EOF'
<template>
  <div class="min-h-screen flex flex-col">
    <header class="navbar bg-base-100 shadow-sm">
      <div class="flex-1 px-4 font-semibold">FlyonUI Nuxt Template</div>
      <div class="flex-none gap-2 px-4">
        <button class="btn btn-ghost" @click="setLocale('ja')">{{ t('ja') }}</button>
        <button class="btn btn-ghost" @click="setLocale('en')">{{ t('en') }}</button>
      </div>
    </header>
    <main class="flex-1 p-6">
      <slot />
    </main>
    <footer class="footer footer-center bg-base-200 text-base-content p-4">
      <aside>
        <p>&copy; {{ new Date().getFullYear() }} Template</p>
      </aside>
    </footer>
  </div>
  <Toast />
  </template>

<script setup lang="ts">
import Toast from '~/components/ui/Toast.vue'
const { t, locale } = useI18n()
const setLocale = (code: string) => { locale.value = code as any }
</script>
EOF
fi

if [[ ! -f components/ui/AppButton.vue ]]; then
  cat > components/ui/AppButton.vue << 'EOF'
<template>
  <button :class="classes" v-bind="$attrs"><slot /></button>
  </template>

<script setup lang="ts">
const props = defineProps<{ variant?: 'primary'|'secondary', size?: 'sm'|'md' }>()
const classes = computed(() => [
  'btn',
  props.variant === 'secondary' ? 'btn-secondary' : 'btn-primary',
  props.size === 'sm' ? 'btn-sm' : ''
].filter(Boolean))
</script>
EOF
fi

if [[ ! -f stores/toast.ts ]]; then
  cat > stores/toast.ts << 'EOF'
import { defineStore } from 'pinia'

export const useToastStore = defineStore('toast', {
  state: () => ({ message: '' as string, visible: false as boolean, timeoutId: 0 as any }),
  actions: {
    show(message: string, timeoutMs = 2000) {
      this.message = message
      this.visible = true
      clearTimeout(this.timeoutId)
      this.timeoutId = setTimeout(() => { this.visible = false }, timeoutMs)
    },
    hide() { this.visible = false }
  }
})
EOF
fi

if [[ ! -f components/ui/Toast.vue ]]; then
  cat > components/ui/Toast.vue << 'EOF'
<template>
  <transition name="fade">
    <div v-if="store.visible" class="toast toast-top toast-end">
      <div class="alert alert-success shadow">{{ store.message }}</div>
    </div>
  </transition>
  </template>

<script setup lang="ts">
import { useToastStore } from '~/stores/toast'
const store = useToastStore()
</script>

<style>
.fade-enter-active, .fade-leave-active { transition: opacity .2s }
.fade-enter-from, .fade-leave-to { opacity: 0 }
</style>
EOF
fi

if [[ ! -f pages/index.vue ]]; then
  cat > pages/index.vue << 'EOF'
<template>
  <div class="space-y-6">
    <h1 class="text-2xl font-bold">{{ t('title') }}</h1>
    <p class="opacity-80">{{ t('hello') }}</p>
    <AppButton variant="primary" @click="onSave">{{ t('save') }}</AppButton>
  </div>
  </template>

<script setup lang="ts">
import AppButton from '~/components/ui/AppButton.vue'
import { useToastStore } from '~/stores/toast'
const { t } = useI18n()
const toast = useToastStore()
const onSave = () => toast.show(t('saved'))
</script>
EOF
fi


